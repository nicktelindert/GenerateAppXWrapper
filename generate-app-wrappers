#!/bin/bash -u
# Name: GenerateAppWrappers
# Description: Create App wrapppers for GNUstep/NextSpace
# Author: Nick te Lindert
# Version: 0.3
# License: GPL2

# Read parameters
iconDir="/usr/share/icons"

printHelp()
{
	echo "GenerateAppswarappers Version: 0.3"
	echo "Parameter list:"
	echo ""
	echo "-i	- What is the location of the .desktop files?"
	echo "-o 	- Where do we place the .app files?"
	echo "-l 	- Set localization in ISO 639-1 format"
	exit 1
}

createAppFolder()
{
	name=$1;
	icon=$2
	executable=$3;
	echo "Add $name..."
	appDir="$outputDir/$name"
	`rm -rf "$appDir"`
	`mkdir "$appDir"`
	cd "$appDir"
	mkdir "Resources"
	createExecutable "$icon" "$executable"
	copyIcon "$icon" "$appDir"
	cd "$appDir"
	createPLIST "$executable" "$name" "$icon"
}

copyIcon()
{
	icon="$1"
	original=`find /usr/share/icons -regextype gnu-awk -regex ".*\/(scalable|256x256|512x512)\/(apps|devices)/$icon.(svg)" -print|head -n 1`
	destination="$2"
	if [[ ! -f "$original" ]]; then
		original=`find /usr/share/icons -regextype gnu-awk -regex ".*\/(48x48)\/(apps|devices)/$icon.(png)" -print|head -n 1`
	else
		`convert "$original" -resize 48x48 "$destination/$icon.tiff"`
	fi
	
	if [[ -f "$original" ]] && [[ ! -f "$destination/$icon.tiff" ]]; then
		`convert "$original" "$destination/$icon.tiff"`
	fi
}

createPLIST()
{
	executable=$1;
	name=$2
	icon=$3

	resourcesDir="Resources"
	plist="$resourcesDir/Info-gnustep.plist"
	`touch "$plist"`
	echo "{" >> $plist
	echo "NSExecutable = \"$icon\";" >> $plist
	echo "NSIcon = \"$icon.tiff\";" >> $plist
	echo "xAppWrapper = YES;" >> $plist
	echo "}" >> $plist
	`indent $plist`
}


createExecutable()
{
	executableName=$1
	executeFile=$2
	parameterFilter=" --*"	
	executeFile=${executeFile%%$parameterFilter}
	parametermatch="\$#"
	parameters="\$2"
	$(touch "$executableName")
	chmod a+x $executableName
	echo "#!/bin/sh" >> $executableName
	echo "" >> $executableName;
	echo "APP=\"$executeFile\"" >> $executableName
	echo "" >> $executableName;
	echo "\$APP &" >> $executableName
}



GenerateApps()
{
	echo "Reading .Desktop files from: $inputDir"
	cd $inputDir
	DESKTOPFILES="*.desktop"
	for f in $DESKTOPFILES; do
		f="$inputDir/$f"
		properties="Name=,Exec=,Icon="
		if  [ "$locale" != "" ]; then
			if [[ -n `grep -s -m1 "^Name[\fr]=" "$f"` ]]; 
			then
				properties="Name\[$locale]=,Exec=,Icon="
			fi
		fi
		Field_Separator=$IFS
		noDisplay=`grep -m1 -s "^NoDisplay=true" "$f"`
		isTerminal=`grep -m1 -s "^Terminal=true" "$f"`
		if [ -z $noDisplay ] && [ -z $isTerminal ]; then
			INDEX=0
			IFS=,
			for prop in $properties; do
				rawVariable=`grep -s -m1 "^$prop" "$f"`
				applicationdata[$INDEX]=`echo ${rawVariable#$prop}`
				((INDEX++))
			done
			IFS=$Field_Separator
			name=${applicationdata[0]}
			executable=${applicationdata[1]% -*}
			removeParameter=" %"
			executable=${executable%$removeParameter*}
			icon=${applicationdata[2]}
			if [[ -n $name ]] && [[ -n $icon ]] && [[ -n $executable ]]; then
				createAppFolder "$name.app" "$icon" "$executable" "$f"	
			fi
			fi
		done


	}


#Main loop
inputDir=""
outputDir=""
locale=""
while getopts "i:o:l:" opt; do
	case $opt in
		i ) inputDir=$OPTARG ;;
		o ) outputDir=$OPTARG ;;
		l ) locale=$OPTARG ;;
		? ) printHelp ;;
	esac
done

if [ -z "$inputDir" ] || [ -z "$outputDir" ]; then
	echo "The required parameters are missing!"
	printHelp	
else
	GenerateApps
fi
